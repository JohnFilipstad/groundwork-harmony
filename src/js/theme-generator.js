document.addEventListener("DOMContentLoaded", () => {
  // --- DOM Element Selectors ---
  const form = document.getElementById("theme-form");
  const themeOutput = document.getElementById("theme-output");
  const copyBtn = document.getElementById("copy-theme");
  const downloadBtn = document.getElementById("download-theme");

  // Live Preview Elements
  const previewContainer = document.getElementById("preview-container");
  const previewHeader = document.getElementById("preview-header");
  const previewFooter = document.getElementById("preview-footer");
  const previewButton = document.getElementById("preview-button");
  const previewBlockquote = document.getElementById("preview-blockquote");
  const swatchPrimary = document.getElementById("swatch-primary");
  const swatchSecondary = document.getElementById("swatch-secondary");
  const swatchAccent = document.getElementById("swatch-accent");

  // Accessibility Checker Elements
  const wcagForm = document.getElementById("wcag-form");
  const wcagBgColorInput = document.getElementById("wcag-bg-color");
  const wcagTextColorSelect = document.getElementById("wcag-text-color");
  const contrastRatioSpan = document.getElementById("contrast-ratio");
  const complianceNormalSpan = document.getElementById("compliance-normal");
  const complianceLargeSpan = document.getElementById("compliance-large");

  // A style tag in the head to apply generated styles for a true live preview
  const previewStyleTag = document.createElement("style");
  document.head.appendChild(previewStyleTag);


  // --- Helper Functions ---

  /**
   * Converts a HEX color string to an RGB object.
   * @param {string} hex - The hex color string (e.g., "#8f2fe9").
   * @returns {{r: number, g: number, b: number}|null} - An object with r, g, b values or null if invalid.
   */
  const hexToRgb = (hex) => {
    if (!hex) return null;
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ?
      {
        r: parseInt(result[1], 16),
        g: parseInt(result[2], 16),
        b: parseInt(result[3], 16),
      } :
      null;
  };

  /**
   * Determines if a color is light or dark based on its luminance.
   * @param {string} hexColor - The hex color string.
   * @returns {boolean} - True if the color is light, false if dark.
   */
  const isColorLight = (hexColor) => {
    const rgb = hexToRgb(hexColor);
    if (!rgb) return false;
    // Formula for perceived brightness
    const luminance = (0.299 * rgb.r + 0.587 * rgb.g + 0.114 * rgb.b) / 255;
    return luminance > 0.5;
  };

  /**
   * Calculates the contrast ratio between two RGB colors.
   * @param {{r: number, g: number, b: number}} rgb1
   * @param {{r: number, g: number, b: number}} rgb2
   * @returns {number} - The contrast ratio.
   */
  const getContrastRatio = (rgb1, rgb2) => {
    const getLuminance = (rgb) => {
      const a = [rgb.r, rgb.g, rgb.b].map((v) => {
        v /= 255;
        return v <= 0.03928 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
      });
      return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;
    };

    const lum1 = getLuminance(rgb1);
    const lum2 = getLuminance(rgb2);
    const brightest = Math.max(lum1, lum2);
    const darkest = Math.min(lum1, lum2);

    return (brightest + 0.05) / (darkest + 0.05);
  };

  // --- Core Functions ---

  /**
   * Reads all form inputs and generates the CSS theme string for export.
   * @returns {string} - The generated CSS code.
   */
  const generateThemeCss = () => {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());
    
    // Font face generation
    let fontFaceCss = '';
    const fontSources = [
        { selector: 'sans-font-regular', family: 'Groundwork Sans', weight: '400', style: 'normal' },
        { selector: 'sans-font-italic', family: 'Groundwork Sans', weight: '400', style: 'italic' },
        { selector: 'serif-font-regular', family: 'Groundwork Serif', weight: '400', style: 'normal' },
        { selector: 'serif-font-italic', family: 'Groundwork Serif', weight: '400', style: 'italic' },
        { selector: 'mono-font-regular', family: 'Groundwork Mono', weight: '400', style: 'normal' },
        { selector: 'mono-font-italic', family: 'Groundwork Mono', weight: '400', style: 'italic' },
    ];
    
    fontSources.forEach(font => {
        const src = data[font.selector];
        if (src && src.trim() !== '') {
            fontFaceCss += `
@font-face {
  font-family: '${font.family}';
  font-style: ${font.style};
  font-weight: ${font.weight};
  src: ${src.trim()};
}
`;
        }
    });

    // Main theme CSS variables for export
    const css = `
/* ===================================================================
   CUSTOM THEME - Generated by Theme Generator
   =================================================================== */

${fontFaceCss.trim()}

:root {
  /* Brand Colors */
  --color-primary: ${data["color-primary"]};
  --color-secondary: ${data["color-secondary"]};
  --color-accent: ${data["color-accent"]};

  /* Header & Footer Backgrounds */
  --background-color-header: ${data["header-bg-color"]};
  --background-color-footer: ${data["footer-bg-color"]};

  /* Typography */
  --font-size-base: ${(data["font-size-base"] / 10).toFixed(2)}rem; /* Converted from ${data["font-size-base"]}px */
  --scale-type: ${data["font-scale"]};
}
`;
    return css.trim();
  };

  /**
   * Updates the live preview section with current form values.
   */
  const updatePreview = () => {
    const formData = new FormData(form);
    const data = Object.fromEntries(formData.entries());

    // Generate and inject the CSS for the live preview variables
    const generatedCss = generateThemeCss();
    previewStyleTag.innerHTML = generatedCss;
    themeOutput.value = generatedCss;

    // Directly update preview components for instant feedback
    const primaryColor = data["color-primary"];
    const secondaryColor = data["color-secondary"];
    const accentColor = data["color-accent"];
    const headerBgColor = data["header-bg-color"];
    const footerBgColor = data["footer-bg-color"];
    
    const getTextColorValue = (bgHex) => {
        return isColorLight(bgHex) ? '#000000DE' : '#FFFFFFDE';
    };

    // Apply colors directly to preview elements
    previewHeader.style.backgroundColor = headerBgColor;
    previewHeader.style.color = getTextColorValue(headerBgColor);
    
    previewFooter.style.backgroundColor = footerBgColor;
    previewFooter.style.color = getTextColorValue(footerBgColor);

    previewButton.style.backgroundColor = accentColor;
    previewButton.style.color = getTextColorValue(accentColor);
    
    previewBlockquote.style.borderColor = secondaryColor;
    previewBlockquote.style.backgroundColor = isColorLight(secondaryColor) ? 'rgba(0,0,0,0.03)' : 'rgba(255,255,255,0.05)';

    // Update color swatches
    swatchPrimary.style.backgroundColor = primaryColor;
    swatchSecondary.style.backgroundColor = secondaryColor;
    swatchAccent.style.backgroundColor = accentColor;
  };
  
  /**
   * Handles the WCAG compliance check.
   */
  const checkWcagCompliance = () => {
      const bgHex = wcagBgColorInput.value;
      const textType = wcagTextColorSelect.value;
      
      const textColor = textType === 'light' 
        ? { r: 0, g: 0, b: 0 } // Simplified black for calculation
        : { r: 255, g: 255, b: 255 }; // Simplified white
        
      const bgRgb = hexToRgb(bgHex);
      if (!bgRgb) {
          contrastRatioSpan.textContent = "N/A (Invalid BG Color)";
          complianceNormalSpan.textContent = "N/A";
          complianceLargeSpan.textContent = "N/A";
          return;
      }
      
      const ratio = getContrastRatio(bgRgb, textColor);
      contrastRatioSpan.textContent = ratio.toFixed(2);
      
      // Check Normal Text (AA: 4.5:1)
      if (ratio >= 4.5) {
          complianceNormalSpan.textContent = "Pass";
          complianceNormalSpan.style.color = "green";
      } else {
          complianceNormalSpan.textContent = "Fail";
          complianceNormalSpan.style.color = "red";
      }
      
      // Check Large Text (AA: 3:1)
      if (ratio >= 3) {
          complianceLargeSpan.textContent = "Pass";
          complianceLargeSpan.style.color = "green";
      } else {
          complianceLargeSpan.textContent = "Fail";
          complianceLargeSpan.style.color = "red";
      }
  };


  // --- Event Listeners ---

  // Update preview live on any form change
  form.addEventListener("input", updatePreview);
  
  // WCAG checker live update
  wcagForm.addEventListener("input", checkWcagCompliance);

  // Copy to clipboard
  copyBtn.addEventListener("click", () => {
    navigator.clipboard.writeText(themeOutput.value).then(() => {
      copyBtn.textContent = "Copied!";
      setTimeout(() => (copyBtn.textContent = "Copy to Clipboard"), 2000);
    }).catch(err => {
        console.error("Failed to copy: ", err)
    });
  });

  // Download as file
  downloadBtn.addEventListener("click", () => {
    const blob = new Blob([themeOutput.value], {
      type: "text/css"
    });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = "custom-theme.css";
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  });

  // --- Initial Run ---
  // Generate the initial theme and preview on page load
  updatePreview();
  checkWcagCompliance();
});
